/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TreasuryInterface extends ethers.utils.Interface {
  functions: {
    "bustadToken()": FunctionFragment;
    "currentReleaseFundContractAddress()": FunctionFragment;
    "currentSnapshotId()": FunctionFragment;
    "getCurrentReleaseFundContractAddress()": FunctionFragment;
    "getReleaseFundContractAddress(uint256)": FunctionFragment;
    "governanceToken()": FunctionFragment;
    "maxReleaseAmount()": FunctionFragment;
    "owner()": FunctionFragment;
    "refundDelay()": FunctionFragment;
    "release(uint256)": FunctionFragment;
    "releaseFundMasterContract()": FunctionFragment;
    "releaseFunds(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMaxReleaseAmount(uint256)": FunctionFragment;
    "setRefundTime(uint256)": FunctionFragment;
    "setWithdrawDelay(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawDelay()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bustadToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentReleaseFundContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSnapshotId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentReleaseFundContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReleaseFundContractAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxReleaseAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFundMasterContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReleaseAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDelay",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bustadToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentReleaseFundContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSnapshotId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentReleaseFundContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleaseFundContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxReleaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseFundMasterContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReleaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDelay",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Release(uint256,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Release"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReleaseEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string] & {
    amount: BigNumber;
    snapshotId: BigNumber;
    refundDelay: BigNumber;
    withdrawDelay: BigNumber;
    releaseFundContractAddress: string;
  }
>;

export class Treasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TreasuryInterface;

  functions: {
    bustadToken(overrides?: CallOverrides): Promise<[string]>;

    currentReleaseFundContractAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    currentSnapshotId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentReleaseFundContractAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReleaseFundContractAddress(
      snapshopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governanceToken(overrides?: CallOverrides): Promise<[string]>;

    maxReleaseAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    refundDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    release(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseFundMasterContract(overrides?: CallOverrides): Promise<[string]>;

    releaseFunds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxReleaseAmount(
      _maxReleaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRefundTime(
      _refundDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawDelay(
      _withdrawDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawDelay(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bustadToken(overrides?: CallOverrides): Promise<string>;

  currentReleaseFundContractAddress(overrides?: CallOverrides): Promise<string>;

  currentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentReleaseFundContractAddress(
    overrides?: CallOverrides
  ): Promise<string>;

  getReleaseFundContractAddress(
    snapshopId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  governanceToken(overrides?: CallOverrides): Promise<string>;

  maxReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  refundDelay(overrides?: CallOverrides): Promise<BigNumber>;

  release(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseFundMasterContract(overrides?: CallOverrides): Promise<string>;

  releaseFunds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxReleaseAmount(
    _maxReleaseAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRefundTime(
    _refundDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawDelay(
    _withdrawDelay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawDelay(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bustadToken(overrides?: CallOverrides): Promise<string>;

    currentReleaseFundContractAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    currentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentReleaseFundContractAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    getReleaseFundContractAddress(
      snapshopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    governanceToken(overrides?: CallOverrides): Promise<string>;

    maxReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    refundDelay(overrides?: CallOverrides): Promise<BigNumber>;

    release(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    releaseFundMasterContract(overrides?: CallOverrides): Promise<string>;

    releaseFunds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setMaxReleaseAmount(
      _maxReleaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefundTime(
      _refundDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawDelay(
      _withdrawDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawDelay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Release(uint256,uint256,uint256,uint256,address)"(
      amount?: null,
      snapshotId?: null,
      refundDelay?: null,
      withdrawDelay?: null,
      releaseFundContractAddress?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        amount: BigNumber;
        snapshotId: BigNumber;
        refundDelay: BigNumber;
        withdrawDelay: BigNumber;
        releaseFundContractAddress: string;
      }
    >;

    Release(
      amount?: null,
      snapshotId?: null,
      refundDelay?: null,
      withdrawDelay?: null,
      releaseFundContractAddress?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber, string],
      {
        amount: BigNumber;
        snapshotId: BigNumber;
        refundDelay: BigNumber;
        withdrawDelay: BigNumber;
        releaseFundContractAddress: string;
      }
    >;
  };

  estimateGas: {
    bustadToken(overrides?: CallOverrides): Promise<BigNumber>;

    currentReleaseFundContractAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentSnapshotId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentReleaseFundContractAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleaseFundContractAddress(
      snapshopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governanceToken(overrides?: CallOverrides): Promise<BigNumber>;

    maxReleaseAmount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    refundDelay(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseFundMasterContract(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFunds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxReleaseAmount(
      _maxReleaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRefundTime(
      _refundDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawDelay(
      _withdrawDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawDelay(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bustadToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentReleaseFundContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentSnapshotId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentReleaseFundContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReleaseFundContractAddress(
      snapshopId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governanceToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReleaseAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseFundMasterContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseFunds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxReleaseAmount(
      _maxReleaseAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRefundTime(
      _refundDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawDelay(
      _withdrawDelay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
