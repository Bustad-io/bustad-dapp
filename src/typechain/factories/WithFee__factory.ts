/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { WithFee, WithFeeInterface } from "../WithFee";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "transferFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mintingFee",
        type: "uint256",
      },
      {
        internalType: "enum WithFee.FeeType",
        name: "transferFeeType",
        type: "uint8",
      },
      {
        internalType: "enum WithFee.FeeType",
        name: "mintingFeeType",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101e03803806101e0833981810160405281019061003291906100fd565b836000819055508260018190555081600260006101000a81548160ff0219169083600181111561006557610064610164565b5b021790555080600260016101000a81548160ff0219169083600181111561008f5761008e610164565b5b021790555050505050610193565b600080fd5b6000819050919050565b6100b5816100a2565b81146100c057600080fd5b50565b6000815190506100d2816100ac565b92915050565b600281106100e557600080fd5b50565b6000815190506100f7816100d8565b92915050565b600080600080608085870312156101175761011661009d565b5b6000610125878288016100c3565b9450506020610136878288016100c3565b9350506040610147878288016100e8565b9250506060610158878288016100e8565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b603f806101a16000396000f3fe6080604052600080fdfea26469706673582212205bb3816f4b132db1ba6ff2658b09f6ea820b9710fb28d220a46d53de9a00bd0f64736f6c63430008090033";

export class WithFee__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    transferFee: BigNumberish,
    mintingFee: BigNumberish,
    transferFeeType: BigNumberish,
    mintingFeeType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<WithFee> {
    return super.deploy(
      transferFee,
      mintingFee,
      transferFeeType,
      mintingFeeType,
      overrides || {}
    ) as Promise<WithFee>;
  }
  getDeployTransaction(
    transferFee: BigNumberish,
    mintingFee: BigNumberish,
    transferFeeType: BigNumberish,
    mintingFeeType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      transferFee,
      mintingFee,
      transferFeeType,
      mintingFeeType,
      overrides || {}
    );
  }
  attach(address: string): WithFee {
    return super.attach(address) as WithFee;
  }
  connect(signer: Signer): WithFee__factory {
    return super.connect(signer) as WithFee__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithFeeInterface {
    return new utils.Interface(_abi) as WithFeeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WithFee {
    return new Contract(address, _abi, signerOrProvider) as WithFee;
  }
}
