/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SwapTest, SwapTestInterface } from "../SwapTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint16",
        name: "ethRate",
        type: "uint16",
      },
      {
        internalType: "contract DaiTest",
        name: "daiContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
    ],
    name: "estimateETHSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
    ],
    name: "swapETH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105dd3803806105dd83398181016040528101906100329190610145565b816000806101000a81548161ffff021916908361ffff16021790555080600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610185565b600080fd5b600061ffff82169050919050565b6100b28161009b565b81146100bd57600080fd5b50565b6000815190506100cf816100a9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610100826100d5565b9050919050565b6000610112826100f5565b9050919050565b61012281610107565b811461012d57600080fd5b50565b60008151905061013f81610119565b92915050565b6000806040838503121561015c5761015b610096565b5b600061016a858286016100c0565b925050602061017b85828601610130565b9150509250929050565b610449806101946000396000f3fe6080604052600436106100295760003560e01c806309ba97d21461002e578063b2f519401461005e575b600080fd5b61004860048036038101906100439190610220565b61009b565b6040516100559190610266565b60405180910390f35b34801561006a57600080fd5b50610085600480360381019061008091906102ad565b610194565b6040516100929190610266565b60405180910390f35b60008060008054906101000a900461ffff1661ffff16346100bc919061031c565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161011b929190610385565b602060405180830381600087803b15801561013557600080fd5b505af1158015610149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016d91906103e6565b5060008054906101000a900461ffff1661ffff163461018c919061031c565b915050919050565b60008060009054906101000a900461ffff1661ffff16836101b5919061031c565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101ed826101c2565b9050919050565b6101fd816101e2565b811461020857600080fd5b50565b60008135905061021a816101f4565b92915050565b600060208284031215610236576102356101bd565b5b60006102448482850161020b565b91505092915050565b6000819050919050565b6102608161024d565b82525050565b600060208201905061027b6000830184610257565b92915050565b61028a8161024d565b811461029557600080fd5b50565b6000813590506102a781610281565b92915050565b600080604083850312156102c4576102c36101bd565b5b60006102d285828601610298565b92505060206102e38582860161020b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103278261024d565b91506103328361024d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561036b5761036a6102ed565b5b828202905092915050565b61037f816101e2565b82525050565b600060408201905061039a6000830185610376565b6103a76020830184610257565b9392505050565b60008115159050919050565b6103c3816103ae565b81146103ce57600080fd5b50565b6000815190506103e0816103ba565b92915050565b6000602082840312156103fc576103fb6101bd565b5b600061040a848285016103d1565b9150509291505056fea264697066735822122018acab1c982de18be8f257c1e6df038897631afe8a9792a5779495f458c3ff8a64736f6c63430008090033";

export class SwapTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    ethRate: BigNumberish,
    daiContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SwapTest> {
    return super.deploy(
      ethRate,
      daiContract,
      overrides || {}
    ) as Promise<SwapTest>;
  }
  getDeployTransaction(
    ethRate: BigNumberish,
    daiContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(ethRate, daiContract, overrides || {});
  }
  attach(address: string): SwapTest {
    return super.attach(address) as SwapTest;
  }
  connect(signer: Signer): SwapTest__factory {
    return super.connect(signer) as SwapTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapTestInterface {
    return new utils.Interface(_abi) as SwapTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapTest {
    return new Contract(address, _abi, signerOrProvider) as SwapTest;
  }
}
