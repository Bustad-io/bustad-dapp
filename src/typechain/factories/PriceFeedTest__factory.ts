/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PriceFeedTest, PriceFeedTestInterface } from "../PriceFeedTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "ethPrice",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_ethPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104993803806104998339818101604052810190610032919061007a565b80600081905550506100a7565b600080fd5b6000819050919050565b61005781610044565b811461006257600080fd5b50565b6000815190506100748161004e565b92915050565b6000602082840312156100905761008f61003f565b5b600061009e84828501610065565b91505092915050565b6103e3806100b66000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806307eac24214610067578063313ce5671461008557806354fd4d50146100a35780637284e416146100c15780639a6fc8f5146100df578063feaf968c14610113575b600080fd5b61006f610135565b60405161007c9190610196565b60405180910390f35b61008d61013b565b60405161009a91906101cd565b60405180910390f35b6100ab610140565b6040516100b89190610201565b60405180910390f35b6100c9610145565b6040516100d691906102b5565b60405180910390f35b6100f960048036038101906100f4919061031e565b61014a565b60405161010a95949392919061035a565b60405180910390f35b61011b61015b565b60405161012c95949392919061035a565b60405180910390f35b60005481565b600090565b600090565b606090565b600080600080600091939590929450565b6000806000806000806000546000806000945094509450945094509091929394565b6000819050919050565b6101908161017d565b82525050565b60006020820190506101ab6000830184610187565b92915050565b600060ff82169050919050565b6101c7816101b1565b82525050565b60006020820190506101e260008301846101be565b92915050565b6000819050919050565b6101fb816101e8565b82525050565b600060208201905061021660008301846101f2565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561025657808201518184015260208101905061023b565b83811115610265576000848401525b50505050565b6000601f19601f8301169050919050565b60006102878261021c565b6102918185610227565b93506102a1818560208601610238565b6102aa8161026b565b840191505092915050565b600060208201905081810360008301526102cf818461027c565b905092915050565b600080fd5b600069ffffffffffffffffffff82169050919050565b6102fb816102dc565b811461030657600080fd5b50565b600081359050610318816102f2565b92915050565b600060208284031215610334576103336102d7565b5b600061034284828501610309565b91505092915050565b610354816102dc565b82525050565b600060a08201905061036f600083018861034b565b61037c6020830187610187565b61038960408301866101f2565b61039660608301856101f2565b6103a3608083018461034b565b969550505050505056fea2646970667358221220bfc196c0c50d5b333390789ada008abfde4d19d77c0d6f895296a87dc84fa6f464736f6c63430008090033";

export class PriceFeedTest__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    ethPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PriceFeedTest> {
    return super.deploy(ethPrice, overrides || {}) as Promise<PriceFeedTest>;
  }
  getDeployTransaction(
    ethPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(ethPrice, overrides || {});
  }
  attach(address: string): PriceFeedTest {
    return super.attach(address) as PriceFeedTest;
  }
  connect(signer: Signer): PriceFeedTest__factory {
    return super.connect(signer) as PriceFeedTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceFeedTestInterface {
    return new utils.Interface(_abi) as PriceFeedTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceFeedTest {
    return new Contract(address, _abi, signerOrProvider) as PriceFeedTest;
  }
}
