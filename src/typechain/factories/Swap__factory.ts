/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Swap, SwapInterface } from "../Swap";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ISwapRouter",
        name: "_swapRouter",
        type: "address",
      },
      {
        internalType: "contract IQuoter",
        name: "_quoter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_weth9",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "_poolFee",
        type: "uint24",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
    ],
    name: "estimateETHSwap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "poolFee",
    outputs: [
      {
        internalType: "uint24",
        name: "",
        type: "uint24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "quoter",
    outputs: [
      {
        internalType: "contract IQuoter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
    ],
    name: "swapETH",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "swapRouter",
    outputs: [
      {
        internalType: "contract ISwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162000b7538038062000b75833981810160405281019062000037919062000230565b8373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080600060146101000a81548162ffffff021916908362ffffff16021790555050505050620002a2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012e8262000101565b9050919050565b6000620001428262000121565b9050919050565b620001548162000135565b81146200016057600080fd5b50565b600081519050620001748162000149565b92915050565b6000620001878262000121565b9050919050565b62000199816200017a565b8114620001a557600080fd5b50565b600081519050620001b9816200018e565b92915050565b620001ca8162000121565b8114620001d657600080fd5b50565b600081519050620001ea81620001bf565b92915050565b600062ffffff82169050919050565b6200020a81620001f0565b81146200021657600080fd5b50565b6000815190506200022a81620001ff565b92915050565b600080600080608085870312156200024d576200024c620000fc565b5b60006200025d8782880162000163565b94505060206200027087828801620001a8565b93505060406200028387828801620001d9565b9250506060620002968782880162000219565b91505092959194509250565b60805160a05160c051610887620002ee600039600081816101990152818161030d01526103340152600081816103650152610448015260008181610259015261042401526108876000f3fe6080604052600436106100555760003560e01c8063089fe6aa1461005a57806309ba97d2146100855780634aa4a4fc146100b5578063b2f51940146100e0578063c31c9c071461011d578063c6bbd5a714610148575b600080fd5b34801561006657600080fd5b5061006f610173565b60405161007c9190610488565b60405180910390f35b61009f600480360381019061009a9190610506565b610188565b6040516100ac919061054c565b60405180910390f35b3480156100c157600080fd5b506100ca61030b565b6040516100d79190610576565b60405180910390f35b3480156100ec57600080fd5b50610107600480360381019061010291906105bd565b61032f565b604051610114919061054c565b60405180910390f35b34801561012957600080fd5b50610132610422565b60405161013f919061065c565b60405180910390f35b34801561015457600080fd5b5061015d610446565b60405161016a9190610698565b60405180910390f35b600060149054906101000a900462ffffff1681565b6000806040518061010001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600060149054906101000a900462ffffff1662ffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200142815260200134815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf38934836040518363ffffffff1660e01b81526004016102b19190610791565b6020604051808303818588803b1580156102ca57600080fd5b505af11580156102de573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061030391906107c2565b915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f0000000000000000000000000000000000000000000000000000000000000000905060008390506000610bb8905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f7729d438585858b866040518663ffffffff1660e01b81526004016103c49594939291906107fe565b602060405180830381600087803b1580156103de57600080fd5b505af11580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041691906107c2565b94505050505092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600062ffffff82169050919050565b6104828161046a565b82525050565b600060208201905061049d6000830184610479565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104d3826104a8565b9050919050565b6104e3816104c8565b81146104ee57600080fd5b50565b600081359050610500816104da565b92915050565b60006020828403121561051c5761051b6104a3565b5b600061052a848285016104f1565b91505092915050565b6000819050919050565b61054681610533565b82525050565b6000602082019050610561600083018461053d565b92915050565b610570816104c8565b82525050565b600060208201905061058b6000830184610567565b92915050565b61059a81610533565b81146105a557600080fd5b50565b6000813590506105b781610591565b92915050565b600080604083850312156105d4576105d36104a3565b5b60006105e2858286016105a8565b92505060206105f3858286016104f1565b9150509250929050565b6000819050919050565b600061062261061d610618846104a8565b6105fd565b6104a8565b9050919050565b600061063482610607565b9050919050565b600061064682610629565b9050919050565b6106568161063b565b82525050565b6000602082019050610671600083018461064d565b92915050565b600061068282610629565b9050919050565b61069281610677565b82525050565b60006020820190506106ad6000830184610689565b92915050565b6106bc816104c8565b82525050565b6106cb8161046a565b82525050565b6106da81610533565b82525050565b6106e9816104a8565b82525050565b6101008201600082015161070660008501826106b3565b50602082015161071960208501826106b3565b50604082015161072c60408501826106c2565b50606082015161073f60608501826106b3565b50608082015161075260808501826106d1565b5060a082015161076560a08501826106d1565b5060c082015161077860c08501826106d1565b5060e082015161078b60e08501826106e0565b50505050565b6000610100820190506107a760008301846106ef565b92915050565b6000815190506107bc81610591565b92915050565b6000602082840312156107d8576107d76104a3565b5b60006107e6848285016107ad565b91505092915050565b6107f8816104a8565b82525050565b600060a0820190506108136000830188610567565b6108206020830187610567565b61082d6040830186610479565b61083a606083018561053d565b61084760808301846107ef565b969550505050505056fea26469706673582212209c45c1509c0624c365122d220ca1af6a6a8353d8d09a1314dc33af9d73cfbf4a64736f6c63430008090033";

export class Swap__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _swapRouter: string,
    _quoter: string,
    _weth9: string,
    _poolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Swap> {
    return super.deploy(
      _swapRouter,
      _quoter,
      _weth9,
      _poolFee,
      overrides || {}
    ) as Promise<Swap>;
  }
  getDeployTransaction(
    _swapRouter: string,
    _quoter: string,
    _weth9: string,
    _poolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _swapRouter,
      _quoter,
      _weth9,
      _poolFee,
      overrides || {}
    );
  }
  attach(address: string): Swap {
    return super.attach(address) as Swap;
  }
  connect(signer: Signer): Swap__factory {
    return super.connect(signer) as Swap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapInterface {
    return new utils.Interface(_abi) as SwapInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Swap {
    return new Contract(address, _abi, signerOrProvider) as Swap;
  }
}
