/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ReleaseFundInterface extends ethers.utils.Interface {
  functions: {
    "bustadToken()": FunctionFragment;
    "checkHasWithdrawnFund(address)": FunctionFragment;
    "govToken()": FunctionFragment;
    "govTokenSnapshopId()": FunctionFragment;
    "hasWithdrawnFunds(address)": FunctionFragment;
    "init(uint256,address,address,uint256,uint256)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "parentTreasury()": FunctionFragment;
    "refundAllowedAt()": FunctionFragment;
    "refundRemaining()": FunctionFragment;
    "releasedAmount()": FunctionFragment;
    "remainingAmount()": FunctionFragment;
    "shareAmountFor(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawAllowedAt()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bustadToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkHasWithdrawnFund",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "govToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "govTokenSnapshopId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasWithdrawnFunds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parentTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundAllowedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundRemaining",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releasedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shareAmountFor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAllowedAt",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bustadToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkHasWithdrawnFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "govToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "govTokenSnapshopId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasWithdrawnFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundAllowedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releasedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareAmountFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllowedAt",
    data: BytesLike
  ): Result;

  events: {
    "FundWithdrawn(address,uint256)": EventFragment;
    "RefundRemaining(uint256)": EventFragment;
    "ReleaseFundInitialised(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FundWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RefundRemaining"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseFundInitialised"): EventFragment;
}

export type FundWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { receiver: string; amount: BigNumber }
>;

export type RefundRemainingEvent = TypedEvent<
  [BigNumber] & { remainingAmount: BigNumber }
>;

export type ReleaseFundInitialisedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    amount: BigNumber;
    snapshotId: BigNumber;
    refundAllowedAt: BigNumber;
    withdrawAllowedAt: BigNumber;
  }
>;

export class ReleaseFund extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ReleaseFundInterface;

  functions: {
    bustadToken(overrides?: CallOverrides): Promise<[string]>;

    checkHasWithdrawnFund(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    govToken(overrides?: CallOverrides): Promise<[string]>;

    govTokenSnapshopId(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasWithdrawnFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      _govTokenSnapshopId: BigNumberish,
      _govToken: string,
      _bustadToken: string,
      _refundAllowedAt: BigNumberish,
      _withdrawAllowedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    parentTreasury(overrides?: CallOverrides): Promise<[string]>;

    refundAllowedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundRemaining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releasedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    shareAmountFor(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAllowedAt(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bustadToken(overrides?: CallOverrides): Promise<string>;

  checkHasWithdrawnFund(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  govToken(overrides?: CallOverrides): Promise<string>;

  govTokenSnapshopId(overrides?: CallOverrides): Promise<BigNumber>;

  hasWithdrawnFunds(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  init(
    _govTokenSnapshopId: BigNumberish,
    _govToken: string,
    _bustadToken: string,
    _refundAllowedAt: BigNumberish,
    _withdrawAllowedAt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  parentTreasury(overrides?: CallOverrides): Promise<string>;

  refundAllowedAt(overrides?: CallOverrides): Promise<BigNumber>;

  refundRemaining(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  shareAmountFor(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAllowedAt(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bustadToken(overrides?: CallOverrides): Promise<string>;

    checkHasWithdrawnFund(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    govToken(overrides?: CallOverrides): Promise<string>;

    govTokenSnapshopId(overrides?: CallOverrides): Promise<BigNumber>;

    hasWithdrawnFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      _govTokenSnapshopId: BigNumberish,
      _govToken: string,
      _bustadToken: string,
      _refundAllowedAt: BigNumberish,
      _withdrawAllowedAt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    parentTreasury(overrides?: CallOverrides): Promise<string>;

    refundAllowedAt(overrides?: CallOverrides): Promise<BigNumber>;

    refundRemaining(overrides?: CallOverrides): Promise<void>;

    releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    shareAmountFor(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawAllowedAt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "FundWithdrawn(address,uint256)"(
      receiver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    FundWithdrawn(
      receiver?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { receiver: string; amount: BigNumber }
    >;

    "RefundRemaining(uint256)"(
      remainingAmount?: null
    ): TypedEventFilter<[BigNumber], { remainingAmount: BigNumber }>;

    RefundRemaining(
      remainingAmount?: null
    ): TypedEventFilter<[BigNumber], { remainingAmount: BigNumber }>;

    "ReleaseFundInitialised(uint256,uint256,uint256,uint256)"(
      amount?: null,
      snapshotId?: null,
      refundAllowedAt?: null,
      withdrawAllowedAt?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        amount: BigNumber;
        snapshotId: BigNumber;
        refundAllowedAt: BigNumber;
        withdrawAllowedAt: BigNumber;
      }
    >;

    ReleaseFundInitialised(
      amount?: null,
      snapshotId?: null,
      refundAllowedAt?: null,
      withdrawAllowedAt?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        amount: BigNumber;
        snapshotId: BigNumber;
        refundAllowedAt: BigNumber;
        withdrawAllowedAt: BigNumber;
      }
    >;
  };

  estimateGas: {
    bustadToken(overrides?: CallOverrides): Promise<BigNumber>;

    checkHasWithdrawnFund(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    govToken(overrides?: CallOverrides): Promise<BigNumber>;

    govTokenSnapshopId(overrides?: CallOverrides): Promise<BigNumber>;

    hasWithdrawnFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _govTokenSnapshopId: BigNumberish,
      _govToken: string,
      _bustadToken: string,
      _refundAllowedAt: BigNumberish,
      _withdrawAllowedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    parentTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    refundAllowedAt(overrides?: CallOverrides): Promise<BigNumber>;

    refundRemaining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releasedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    shareAmountFor(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAllowedAt(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bustadToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkHasWithdrawnFund(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    govToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    govTokenSnapshopId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasWithdrawnFunds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _govTokenSnapshopId: BigNumberish,
      _govToken: string,
      _bustadToken: string,
      _refundAllowedAt: BigNumberish,
      _withdrawAllowedAt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundAllowedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundRemaining(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releasedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shareAmountFor(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAllowedAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
