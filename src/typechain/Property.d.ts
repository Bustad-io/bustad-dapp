/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PropertyInterface extends ethers.utils.Interface {
  functions: {
    "addActiveProperty(bytes32,(bytes32,bytes32,string,uint256,uint256,uint256,uint8,uint8))": FunctionFragment;
    "getProperty(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "propertyList(bytes32)": FunctionFragment;
    "removeProperty(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPropertyAsSold(bytes32,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addActiveProperty",
    values: [
      BytesLike,
      {
        Id: BytesLike;
        cadastralNumber: BytesLike;
        purchaseDate: string;
        estimatedValue: BigNumberish;
        purchaseAmount: BigNumberish;
        soldAmount: BigNumberish;
        shareOfPropertyInPct: BigNumberish;
        status: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProperty",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "propertyList",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeProperty",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPropertyAsSold",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addActiveProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "propertyList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProperty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPropertyAsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PropertyPurchased(bytes32,bytes32,uint256,string,uint256,uint8)": EventFragment;
    "PropertySold(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertyPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PropertySold"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PropertyPurchasedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, number] & {
    id: string;
    cadastralNumber: string;
    estimatedValue: BigNumber;
    purchaseDate: string;
    purchaseAmount: BigNumber;
    shareOfPropertyInPct: number;
  }
>;

export type PropertySoldEvent = TypedEvent<
  [string, BigNumber] & { id: string; soldAmount: BigNumber }
>;

export class Property extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PropertyInterface;

  functions: {
    addActiveProperty(
      id: BytesLike,
      _prop: {
        Id: BytesLike;
        cadastralNumber: BytesLike;
        purchaseDate: string;
        estimatedValue: BigNumberish;
        purchaseAmount: BigNumberish;
        soldAmount: BigNumberish;
        shareOfPropertyInPct: BigNumberish;
        status: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProperty(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          number,
          number
        ] & {
          Id: string;
          cadastralNumber: string;
          purchaseDate: string;
          estimatedValue: BigNumber;
          purchaseAmount: BigNumber;
          soldAmount: BigNumber;
          shareOfPropertyInPct: number;
          status: number;
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    propertyList(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        Id: string;
        cadastralNumber: string;
        purchaseDate: string;
        estimatedValue: BigNumber;
        purchaseAmount: BigNumber;
        soldAmount: BigNumber;
        shareOfPropertyInPct: number;
        status: number;
      }
    >;

    removeProperty(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPropertyAsSold(
      id: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addActiveProperty(
    id: BytesLike,
    _prop: {
      Id: BytesLike;
      cadastralNumber: BytesLike;
      purchaseDate: string;
      estimatedValue: BigNumberish;
      purchaseAmount: BigNumberish;
      soldAmount: BigNumberish;
      shareOfPropertyInPct: BigNumberish;
      status: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProperty(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      Id: string;
      cadastralNumber: string;
      purchaseDate: string;
      estimatedValue: BigNumber;
      purchaseAmount: BigNumber;
      soldAmount: BigNumber;
      shareOfPropertyInPct: number;
      status: number;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  propertyList(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      Id: string;
      cadastralNumber: string;
      purchaseDate: string;
      estimatedValue: BigNumber;
      purchaseAmount: BigNumber;
      soldAmount: BigNumber;
      shareOfPropertyInPct: number;
      status: number;
    }
  >;

  removeProperty(
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPropertyAsSold(
    id: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addActiveProperty(
      id: BytesLike,
      _prop: {
        Id: BytesLike;
        cadastralNumber: BytesLike;
        purchaseDate: string;
        estimatedValue: BigNumberish;
        purchaseAmount: BigNumberish;
        soldAmount: BigNumberish;
        shareOfPropertyInPct: BigNumberish;
        status: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getProperty(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        Id: string;
        cadastralNumber: string;
        purchaseDate: string;
        estimatedValue: BigNumber;
        purchaseAmount: BigNumber;
        soldAmount: BigNumber;
        shareOfPropertyInPct: number;
        status: number;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    propertyList(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        Id: string;
        cadastralNumber: string;
        purchaseDate: string;
        estimatedValue: BigNumber;
        purchaseAmount: BigNumber;
        soldAmount: BigNumber;
        shareOfPropertyInPct: number;
        status: number;
      }
    >;

    removeProperty(id: BytesLike, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPropertyAsSold(
      id: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PropertyPurchased(bytes32,bytes32,uint256,string,uint256,uint8)"(
      id?: null,
      cadastralNumber?: null,
      estimatedValue?: null,
      purchaseDate?: null,
      purchaseAmount?: null,
      shareOfPropertyInPct?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, number],
      {
        id: string;
        cadastralNumber: string;
        estimatedValue: BigNumber;
        purchaseDate: string;
        purchaseAmount: BigNumber;
        shareOfPropertyInPct: number;
      }
    >;

    PropertyPurchased(
      id?: null,
      cadastralNumber?: null,
      estimatedValue?: null,
      purchaseDate?: null,
      purchaseAmount?: null,
      shareOfPropertyInPct?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, BigNumber, number],
      {
        id: string;
        cadastralNumber: string;
        estimatedValue: BigNumber;
        purchaseDate: string;
        purchaseAmount: BigNumber;
        shareOfPropertyInPct: number;
      }
    >;

    "PropertySold(bytes32,uint256)"(
      id?: null,
      soldAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { id: string; soldAmount: BigNumber }
    >;

    PropertySold(
      id?: null,
      soldAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { id: string; soldAmount: BigNumber }
    >;
  };

  estimateGas: {
    addActiveProperty(
      id: BytesLike,
      _prop: {
        Id: BytesLike;
        cadastralNumber: BytesLike;
        purchaseDate: string;
        estimatedValue: BigNumberish;
        purchaseAmount: BigNumberish;
        soldAmount: BigNumberish;
        shareOfPropertyInPct: BigNumberish;
        status: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProperty(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    propertyList(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeProperty(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPropertyAsSold(
      id: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addActiveProperty(
      id: BytesLike,
      _prop: {
        Id: BytesLike;
        cadastralNumber: BytesLike;
        purchaseDate: string;
        estimatedValue: BigNumberish;
        purchaseAmount: BigNumberish;
        soldAmount: BigNumberish;
        shareOfPropertyInPct: BigNumberish;
        status: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProperty(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    propertyList(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeProperty(
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPropertyAsSold(
      id: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
